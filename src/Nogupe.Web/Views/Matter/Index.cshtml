@model PagedListResultViewModel<MatterViewModel>

@{
    ViewData["Title"] = "Index";
}

@{
    var urlTemplate = Url.Action() + "?page={0}&pageSize=10";
    var request = ViewContext.HttpContext.Request;
    foreach (var key in request.Query.Keys)
    {
        if (key == "page" || key == "pageSize")
        {
            continue;
        }

        urlTemplate += "&" + key + "=" + request.Query[key];
    }

    var startIndex = Math.Max(Model.CurrentPage - 5, 1);
    var finishIndex = Math.Min(Model.CurrentPage + 5, Model.PageCount);
}

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="box-header card-header">
                <form method="post">
                    <button id="btnCreate" type="button" class="btn btn-success pull-right" onclick="CreateMatter()" data-toggle="modal" data-target="myModal">Nueva Carrera</button>
                    <input id="btnSearch" type="submit" name="btnSearch" class="btn btn-primary float-right pull-right" value="Buscar" />
                    <input id="searchTerm" type="text" name="searchTerm" class="form-control float-right pull-right" style="width:180px;margin-right:10px;" />
                </form>
            </div>
            <div class="box-body card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col">
                                Nombre
                            </th>
                            <th scope="col"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Results)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => item.Name)
                                </td>
                                <td class="text-center">
                                    <button id="btnEditModal" class="btn btn-sm btn-primary pull-right" onclick="EditMatter(@item.Id)" data-toggle="modal" data-target="editModal">Editar</button> |
                                    <button id="btnDeleteModal" class="btn btn-sm btn-danger pull-right" onclick="DeleteMatter(@item.Id)" data-toggle="modal" data-target="deleteModal">Borrar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="box-shadow card-footer">
                <nav aria-label="Page Navigation">
                    @if (Model.PageCount > 1)
                    {
                        <ul class="pagination justify-content-center">
                            <li class="page-item">
                                <a class="page-link" href="@urlTemplate.Replace("{0}", "1")" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                    <span class="sr-only">Previous</span>
                                </a>
                            </li>
                            @for (var i = startIndex; i <= finishIndex; i++)
                            {
                                @if (i == Model.CurrentPage)
                                {

                                    <li class="page-item"><a class="page-link">@i</a></li>
                                }
                                else
                                {

                                    <li class="page-item"><a class="page-link" href="@urlTemplate.Replace("{0}", i.ToString())">@i</a></li>
                                }
                            }
                            <li class="page-item">
                                <a class="page-link" href="@urlTemplate.Replace("{0}", Model.PageCount.ToString())" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </li>
                        </ul>}
                </nav>
            </div>
        </div>
    </div>
</div>

<div class="toast" aria-live="polite" aria-atomic="true">
    <div class="toast-body alert-success">
        Registro guardado.
    </div>
</div>

<div class="toast toast-delete" aria-live="polite" aria-atomic="true">
    <div class="toast-body alert-danger">
        Registro eliminado.
    </div>
</div>

<!-- Modal Create -->
<div class="modal fade" id="createModal" role="dialog" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" id="createModalBody">

        </div>
    </div>
</div>

<!-- Modal Edit -->
<div class="modal fade" id="editModal" role="dialog" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content" id="editModalBody">

        </div>
    </div>
</div>

<!-- Modal Delete -->
<div class="modal fade" id="deleteModal" role="dialog" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content" id="deleteModalBody">
            <partial name="_Delete" />
        </div>
    </div>
</div>

@section Scripts {

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); };

<script type="text/javascript">

    $(document).ready(function () {

    });

        function CreateMatter() {
            var url = "@Url.Action("Create", "Matter")";
            $.get(url, function (res) {
                $('#createModalBody').html(res);
                $('#createModal').modal('show');
            });
        };

        function EditMatter(id) {
            var url = "@Url.Action("Edit", "Matter")";
            $.get(url, { id: id }, function (res) {
                $('#editModalBody').html(res);
                $('#editModal').modal('show');
            })
        };

        function DeleteMatter(id) {
            $('#deleteModal').modal('show');
            $('#deleteModal #id').val(id);
        }

    function CreateFormMatter() {

        var modal = $('#createModal');
        var form = $('form[name="createForm"]');

        form.validate({
            rules: {
                Name: {
                    required: true
                },
                CareerId: {
                    required: true
                }
            },
            messages: {
                Name: {
                    required: "Requerido.",
                },
                CareerId: {
                    required: "Debe seleccionar una opción."
                }
            },
            errorElement: 'div',
            wrapper: "div",
            errorPlacement: function (error, element) {
                error.insertAfter(element)
                error.addClass('error-message');  // add a class to the wrapper
                error.css('color', 'red');
            }
        });
        if (!form.valid()) {
            return
        } else {
            var data = form.serialize();
            var url = "@Url.Action("Create","Matter")";
            $.post(url, data, function (res) {
                if (res) {
                    modal.modal('hide');
                    $('.toast').toast('show');
                }
            });
        };
};

    function EditFormMatter() {
        var modal = $('#editModal');
        var form = $('form[name="editForm"]');

        form.validate({
            rules: {
                Name: {
                    required: true
                },
                CareerId: {
                    required: true
                }
            },
            messages: {
                Name: {
                    required: "Requerido.",
                },
                CareerId: {
                    required: "Debe seleccionar una opción."
                }
            },
            errorElement: 'div',
            wrapper: "div",
            errorPlacement: function (error, element) {
                error.insertAfter(element)
                error.addClass('error-message');  // add a class to the wrapper
                error.css('color', 'red');
            }
        });
        if (!form.valid()) {
            return
        } else {
            var data = form.serialize();
            var url = "@Url.Action("Edit","Matter")";
            $.post(url, data, function (res) {
                if (res) {
                    modal.modal('hide');
                    $('.toast').toast('show');
                }
            });
        };
    }

    function DeleteFormMatter() {
        var modal = $('#deleteModal');
        var dataId = modal.find('input[name="id"]').val();
        var url = "@Url.Action("Delete","Matter")";

        $.post(url, { id: dataId }, function (res) {
            if (res) {
                modal.modal('hide');
                $('.toast-delete').toast('show');
            }
        });
    }

</script>
}
